{"mappings":"AAqCA,MAAMA,EAAUC,SAASC,cAAc,SACrBD,SAASC,cAAc,uBACtBD,SAASC,cAAc,qBACxBD,SAASC,cAAc,oBACrBD,SAASC,cAAc,sBAwB3C,SAASC,EAAcC,EAAUC,GACTC,KAAKC,SAMzBC,QAAQC,IAAIL,EAAUC,GAzB1BL,EAAQU,iBAAiB,UAEzB,SAAsBC,GAClBA,EAAIC,iBACJ,MAAMP,MAAEA,EAAKQ,KAAEA,EAAIC,OAAEA,GAAWH,EAAII,OAEpC,IAAIC,EAAWC,OAAOZ,EAAMa,OAC5B,MAAMC,EAAUF,OAAOJ,EAAKK,OACtBE,EAAYH,OAAOH,EAAOI,OAEhC,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAWC,GAAK,EACjClB,EAAckB,EAAGL,GACjBA,GAAYG","sources":["src/js/03-promises.js"],"sourcesContent":["// В HTML есть разметка формы, в поля которой пользователь будет вводить первую задержку в миллисекундах, шаг увеличения задержки для каждого промиса после первого и количество промисов которое необходимо создать.\n\n// <form class=\"form\">\n//   <label>\n//     First delay (ms)\n//     <input type=\"number\" name=\"delay\" required />\n//   </label>\n//   <label>\n//     Delay step (ms)\n//     <input type=\"number\" name=\"step\" required />\n//   </label>\n//   <label>\n//     Amount\n//     <input type=\"number\" name=\"amount\" required />\n//   </label>\n//   <button type=\"submit\">Create promises</button>\n// </form>\n// Напиши скрипт, который при сабмите формы вызывает функцию createPromise(position, delay) столько раз, сколько ввели в поле amount. При каждом вызове передай ей номер создаваемого промиса (position) и задержку учитывая введенную пользователем первую задержку (delay) и шаг (step).\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n// Дополни код функции createPromise так, чтобы она возвращала один промис, который выполянется или отклоняется через delay времени. Значением промиса должен быть объект, в котором будут свойства position и delay со значениями одноименных параметров. Используй начальный код функции для выбора того, что нужно сделать с промисом - выполнить или отклонить.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\nconst formRef = document.querySelector(\".form\");\nconst submitBtn = document.querySelector(\"button[type=submit]\");\nconst inputDelay = document.querySelector(\"input[name=delay]\");\nconst inputStep = document.querySelector(\"input[name=step]\");\nconst inputAmount = document.querySelector(\"input[name=amount]\");\n\n\n// inputAmount.addEventListener(\"input\", (event) => {\n//     console.log(event.currentTarget.value);\n//   });\nformRef.addEventListener(\"submit\", handleSubmit);\n\nfunction handleSubmit(evt) {\n    evt.preventDefault();\n    const { delay, step, amount } = evt.target;\n\n    let delayNum = Number(delay.value);\n    const stepNum = Number(step.value);\n    const amountNum = Number(amount.value);\n\n    for (let i = 1; i <= amountNum; i += 1) {\n        createPromise(i, delayNum)\n        delayNum += stepNum;\n    }\n}\n\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n    console.log(position, delay);\n}\n"],"names":["$47d4ff9957288465$var$formRef","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Math","random","console","log","addEventListener","evt","preventDefault","step","amount","target","delayNum","Number","value","stepNum","amountNum","i"],"version":3,"file":"03-promises.a8dca517.js.map"}